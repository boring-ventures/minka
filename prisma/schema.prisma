generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  role                 UserRole        @default(user)
  activeCampaignsCount Int             @default(0) @map("active_campaigns_count")
  address              String?
  bio                  String?
  birthDate            DateTime        @map("birth_date") @db.Date
  createdAt            DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  email                String          @unique
  identityNumber       String          @unique @map("identity_number")
  joinDate             DateTime        @default(now()) @map("join_date") @db.Date
  location             String?
  name                 String
  passwordHash         String          @map("password_hash")
  phone                String
  profilePicture       String?         @map("profile_picture")
  status               Status          @default(active)
  updatedAt            DateTime        @updatedAt @map("updated_at") @db.Timestamp(6)
  verificationStatus   Boolean         @default(false) @map("verification_status")
  id                   String          @id @default(uuid()) @db.Uuid
  campaigns            Campaign[]      @relation("OrganizerCampaigns")
  comments             Comment[]       @relation("ProfileComments")
  donations            Donation[]      @relation("DonorDonations")
  savedCampaigns       SavedCampaign[] @relation("ProfileSavedCampaigns")
  notifications        Notification[]  @relation("UserNotifications")
  systemNotificationLogs SystemNotificationLog[] @relation("AdminSystemNotifications")

  @@map("profiles")
}

model Campaign {
  id                       String               @id @default(uuid()) @db.Uuid
  title                    String
  description              String
  story                    String               @db.VarChar(600)
  beneficiariesDescription String               @map("beneficiaries_description")
  category                 CampaignCategory
  goalAmount               Decimal              @map("goal_amount") @db.Decimal
  collectedAmount          Decimal              @default(0) @map("collected_amount") @db.Decimal
  donorCount               Int                  @default(0) @map("donor_count")
  percentageFunded         Float                @map("percentage_funded")
  daysRemaining            Int                  @map("days_remaining")
  youtubeUrl               String?              @map("youtube_url")
  location                 Region
  province                 Province?            // Optional province field
  endDate                  DateTime             @map("end_date") @db.Date
  verificationStatus       Boolean              @default(false) @map("verification_status")
  verificationDate         DateTime?            @map("verification_date") @db.Timestamp(6)
  campaignStatus           CampaignStatus       @default(draft) @map("campaign_status")
  status                   Status               @default(active)
  organizerId              String               @map("organizer_id") @db.Uuid
  legalEntityId            String?              @map("legal_entity_id") @db.Uuid
  createdAt                DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime             @updatedAt @map("updated_at") @db.Timestamp(6)
  youtubeUrls              String[]             @default([]) @map("youtube_urls")
  media                    CampaignMedia[]      @relation("CampaignMedia")
  updates                  CampaignUpdate[]     @relation("CampaignUpdates")
  organizer                Profile              @relation("OrganizerCampaigns", fields: [organizerId], references: [id])
  legalEntity              LegalEntity?         @relation("LegalEntityCampaigns", fields: [legalEntityId], references: [id])
  comments                 Comment[]            @relation("CampaignComments")
  donations                Donation[]           @relation("CampaignDonations")
  savedBy                  SavedCampaign[]      @relation("CampaignSaved")
  verificationRequests     CampaignVerification? @relation("CampaignVerificationRequests")
  fundTransfers            FundTransfer[]       @relation("CampaignFundTransfers")
  notifications            Notification[]       @relation("CampaignNotifications")

  @@map("campaigns")
}

model CampaignVerification {
  id                String              @id @default(uuid()) @db.Uuid
  campaignId        String              @unique @map("campaign_id") @db.Uuid
  requestDate       DateTime            @default(now()) @map("request_date") @db.Timestamp(6)
  approvalDate      DateTime?           @map("approval_date") @db.Timestamp(6)
  verificationStatus VerificationStatus @default(pending) @map("verification_status")
  notes             String?
  idDocumentUrl     String?             @map("id_document_url")
  supportingDocsUrls String[]           @default([]) @map("supporting_docs_urls")
  campaignStory     String?             @map("campaign_story") @db.Text
  referenceContactName String?          @map("reference_contact_name")
  referenceContactEmail String?         @map("reference_contact_email")
  referenceContactPhone String?         @map("reference_contact_phone")
  status            Status              @default(active)
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  campaign          Campaign            @relation("CampaignVerificationRequests", fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_verifications")
}

model CampaignMedia {
  id         String    @id @default(uuid()) @db.Uuid
  campaignId String    @map("campaign_id") @db.Uuid
  mediaUrl   String    @map("media_url")
  type       MediaType
  isPrimary  Boolean   @default(false) @map("is_primary")
  orderIndex Int       @map("order_index")
  status     Status    @default(active)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  campaign   Campaign  @relation("CampaignMedia", fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_media")
}

model CampaignUpdate {
  id         String   @id @default(uuid()) @db.Uuid
  campaignId String   @map("campaign_id") @db.Uuid
  title      String
  content    String
  youtubeUrl String?  @map("youtube_url")
  imageUrl   String?  @map("image_url")
  status     Status   @default(active)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  campaign   Campaign @relation("CampaignUpdates", fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_updates")
}

model Donation {
  id                  String        @id @default(uuid()) @db.Uuid
  campaignId          String        @map("campaign_id") @db.Uuid
  donorId             String        @map("donor_id") @db.Uuid
  amount              Decimal       @db.Decimal
  currency            String        @default("BOB")
  predefinedAmount    Boolean       @default(true) @map("predefined_amount")
  paymentMethod       PaymentMethod @map("payment_method")
  paymentStatus       PaymentStatus @default(pending) @map("payment_status")
  message             String?
  isAnonymous         Boolean       @default(false) @map("is_anonymous")
  notificationEnabled Boolean       @default(false) @map("notification_enabled")
  status              Status        @default(active)
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  campaign            Campaign      @relation("CampaignDonations", fields: [campaignId], references: [id], onDelete: Cascade)
  donor               Profile       @relation("DonorDonations", fields: [donorId], references: [id], onDelete: Cascade)
  notifications       Notification[] @relation("DonationNotifications")

  @@map("donations")
}

model Comment {
  id         String   @id @default(uuid()) @db.Uuid
  campaignId String   @map("campaign_id") @db.Uuid
  profileId  String   @map("profile_id") @db.Uuid
  message    String
  status     Status   @default(active)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  campaign   Campaign @relation("CampaignComments", fields: [campaignId], references: [id], onDelete: Cascade)
  profile    Profile  @relation("ProfileComments", fields: [profileId], references: [id], onDelete: Cascade)
  notifications Notification[] @relation("CommentNotifications")

  @@map("comments")
}

model SavedCampaign {
  id         String   @id @default(uuid()) @db.Uuid
  profileId  String   @map("profile_id") @db.Uuid
  campaignId String   @map("campaign_id") @db.Uuid
  status     Status   @default(active)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  campaign   Campaign @relation("CampaignSaved", fields: [campaignId], references: [id], onDelete: Cascade)
  profile    Profile  @relation("ProfileSavedCampaigns", fields: [profileId], references: [id], onDelete: Cascade)

  @@map("saved_campaigns")
}

model NotificationPreference {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @unique @map("user_id") @db.Uuid
  newsUpdates     Boolean  @default(false) @map("news_updates")
  campaignUpdates Boolean  @default(true) @map("campaign_updates")
  status          Status   @default(active)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("notification_preferences")
}

model Notification {
  id           String             @id @default(uuid()) @db.Uuid
  userId       String             @map("user_id") @db.Uuid
  type         NotificationType
  title        String
  message      String
  isRead       Boolean            @default(false) @map("is_read")
  campaignId   String?            @map("campaign_id") @db.Uuid
  donationId   String?            @map("donation_id") @db.Uuid
  commentId    String?            @map("comment_id") @db.Uuid
  status       Status             @default(active)
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)
  user         Profile            @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  campaign     Campaign?          @relation("CampaignNotifications", fields: [campaignId], references: [id], onDelete: Cascade)
  donation     Donation?          @relation("DonationNotifications", fields: [donationId], references: [id], onDelete: Cascade)
  comment      Comment?           @relation("CommentNotifications", fields: [commentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemNotificationLog {
  id              String   @id @default(uuid()) @db.Uuid
  adminId         String   @map("admin_id") @db.Uuid
  title           String
  content         String   @db.Text
  target          String   // "all", "donors", "organizers", "admins"
  recipientCount  Int      @map("recipient_count")
  status          Status   @default(active)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  admin           Profile  @relation("AdminSystemNotifications", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("system_notification_logs")
}

model FundTransfer {
  id                String              @id @default(uuid()) @db.Uuid
  campaignId        String              @map("campaign_id") @db.Uuid
  accountHolderName String              @map("account_holder_name")
  bankName          String              @map("bank_name")
  accountNumber     String              @map("account_number")
  amount            Decimal             @db.Decimal
  status            TransferStatus      @default(processing)
  frequency         TransferFrequency   @default(monthly_once)
  transferDate      DateTime?           @map("transfer_date") @db.Timestamp(6)
  notes             String?
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  campaign          Campaign            @relation("CampaignFundTransfers", fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("fund_transfers")
}

model LegalEntity {
  id                String    @id @default(uuid()) @db.Uuid
  name              String    // Organization/company name
  taxId             String?   @map("tax_id") // Tax identification number (NIT in Bolivia)
  registrationNumber String? @map("registration_number") // Business registration number
  legalForm         String?   @map("legal_form") // Legal form (S.A., S.R.L., etc.)
  address           String?
  city              String?
  province          Province?
  department        Region?
  phone             String?
  email             String?
  website           String?
  description       String?   @db.Text
  documentUrls      String[]  @default([]) @map("document_urls") // Legal documents
  isActive          Boolean   @default(true) @map("is_active")
  status            Status    @default(active)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  
  // Relations
  campaigns         Campaign[] @relation("LegalEntityCampaigns")

  @@map("legal_entities")
}

enum UserRole {
  user
  organizer
  admin
}

enum CampaignCategory {
  cultura_arte
  educacion
  emergencia
  igualdad
  medioambiente
  salud
  otros
}

enum CampaignStatus {
  draft
  active
  completed
  cancelled
}

enum VerificationStatus {
  pending
  approved
  rejected
}

enum MediaType {
  image
  video
}

enum PaymentMethod {
  credit_card
  qr
  bank_transfer
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum Status {
  active
  inactive
}

enum Region {
  la_paz
  santa_cruz
  cochabamba
  sucre
  oruro
  potosi
  tarija
  beni
  pando
}

enum Province {
  // La Paz Department
  murillo
  omasuyos
  pacajes
  camacho
  muñecas
  larecaja
  franz_tamayo
  ingavi
  los_andes
  aroma
  nor_yungas
  sud_yungas
  inquisivi
  loayza
  caranavi
  gualberto_villarroel
  jose_manuel_pando
  manco_kapac
  abel_iturralde
  bautista_saavedra
  
  // Santa Cruz Department
  andres_ibañez
  warnes
  sara
  ichilo
  chiquitos
  sandoval
  german_busch
  guarayos
  cordillera
  vallegrande
  florida
  camiri
  ignacio_warnes
  obispo_santiestevan
  
  // Cochabamba Department
  cercado
  campero
  ayopaya
  esteban_arze
  arque
  capinota
  quillacollo
  jordan
  punata
  tiraque
  carrasco_cochabamba
  chapare
  mizque
  aiquile
  bolivar_cochabamba
  tapacare
  
  // Chuquisaca Department (Sucre)
  oropeza
  yamparaez
  nor_cinti
  sud_cinti
  belisario_boeto
  tomina
  hernando_siles
  luis_calvo
  azurduy
  zudañez
  
  // Oruro Department
  cercado_oruro
  eduardo_avaroa
  carangas
  sajama
  litoral
  poopo
  pantaleón_dalence
  ladislao_cabrera
  saucarí
  sebastian_pagador
  tomas_barron
  sur_carangas
  mejillones
  nor_carangas
  cercado_de_oruro
  sabaya
  
  // Potosí Department
  tomas_frias
  rafael_bustillo
  cornelio_saavedra
  chayanta
  charcas
  alonso_de_ibañez
  bernardino_bilbao
  antonio_quijarro
  jose_maria_linares
  nor_lipez
  sur_lipez
  daniel_campos
  modesto_omiste
  enrique_baldivieso
  sud_chichas
  nor_chichas
  
  // Tarija Department
  cercado_tarija
  arce
  gran_chaco
  avilés
  méndez
  o_connor
  
  // Beni Department
  cercado_beni
  vaca_diez
  jose_ballivian
  yacuma
  moxos
  mamore
  itenez
  marbán
  
  // Pando Department
  nicolas_suarez
  manuripi
  madre_de_dios
  abuna
  federico_roman
}

enum TransferStatus {
  processing
  completed
  rejected
  cancelled
}

enum TransferFrequency {
  monthly_once
  monthly_twice
  every_90_days
}

enum NotificationType {
  donation_received
  comment_received
  campaign_update
  general_news
}
